#!/bin/bash

VERSION="1.0"
QUIET_MODE=false
GROUP=""
CSV_FILE=""

for arg in "$@"; do
    case "$arg" in
        --help)
            echo "Використання: $0 [група] [файл.csv]"
            echo "  --help       Показати інструкцію"
            echo "  --version    Показати версію"
            echo "  -q, --quiet  Тихий режим (без виводу)"
            exit 0
            ;;
        --version)
            echo "Версія: $VERSION"
            exit 0
            ;;
        -q|--quiet)
            QUIET_MODE=true
            ;;
        *.csv)
            CSV_FILE="$arg"
            ;;
        *)
            GROUP="$arg"
            ;;
    esac
done

print_if_needed() {
    $QUIET_MODE || echo "$@"
}

if [ -z "$CSV_FILE" ]; then
    files_found=($(ls -1t | grep -E '^TimeTable_[0-9]{2}_[0-9]{2}_[0-9]{4}\.csv'))
    if [ ${#files_found[@]} -eq 0 ]; then
        echo "Не знайдено жодного файлу розкладу." >&2
        exit 1
    fi
    files_found+=("Вихід")
    print_if_needed "Виберіть файл розкладу:"
    select f in "${files_found[@]}"; do
        if [ "$f" == "Вихід" ]; then
            print_if_needed "Операцію скасовано."
            exit 0
        elif [ -n "$f" ]; then
            CSV_FILE="$f"
            print_if_needed "Файл обрано: $CSV_FILE"
            break
        else
            print_if_needed "Невірний вибір, спробуйте знову."
        fi
    done
fi

if [ ! -f "$CSV_FILE" ]; then
    echo "Файл '$CSV_FILE' не знайдено." >&2
    exit 1
fi

temp_group_file=$(mktemp)
mapfile -t all_groups < <(sed 's/\r/\n/g' "$CSV_FILE" | iconv -f cp1251 -t utf-8 2>/dev/null | tee "$temp_group_file" | awk '
    BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
    NR > 1 {
        gsub(/^"|"$/, "", $1)
        n = split($1, segments, " ")
        for (i = 1; i <= n; ++i) {
            if (segments[i] ~ /^ПЗПІ-23-[0-9]+$/) print segments[i]
        }
    }' | sort -u)

if [ ${#all_groups[@]} -eq 0 ]; then
    echo "Групи у форматі ПЗПІ-23-ЧИСЛО не знайдено." >&2
    exit 1
fi

if [[ -n "$GROUP" && ${#all_groups[@]} -eq 1 && "$GROUP" != "${all_groups[0]}" ]]; then
    print_if_needed "Файл містить лише одну групу: ${all_groups[0]}"
    exit 0
fi

if [ -z "$GROUP" ]; then
    if [ ${#all_groups[@]} -eq 1 ]; then
        GROUP="${all_groups[0]}"
        print_if_needed "Знайдена єдина група: $GROUP"
    else
        all_groups+=("Назад")
        print_if_needed "Оберіть групу:"
        select g in "${all_groups[@]}"; do
            if [ "$g" = "Назад" ]; then
                print_if_needed "Скасовано вибір групи."
                exit 0
            elif [ -n "$g" ]; then
                GROUP="$g"
                print_if_needed "Група обрана: $GROUP"
                break
            else
                print_if_needed "Спробуйте ще раз."
            fi
        done
    fi
fi

mode=$(sed 's/\r/\n/g' "$CSV_FILE" | iconv -f cp1251 -t utf-8 | awk '
    BEGIN { FPAT="[^,]*|\"[^\"]*\"" }
    NR > 1 {
        gsub(/^"|"$/, "", $1)
        split($1, p, " ")
        if (p[1] ~ /^ПЗПІ-23-[0-9]+$/) {
            print "standard"
        } else if ($5 ~ /^ПЗПІ-23-[0-9]+$/) {
            print "fallback:" $5
        }
        exit
    }')

if [[ "$mode" =~ fallback:(.*) ]]; then
    fallback="${BASH_REMATCH[1]}"
    print_if_needed "Режим fallback. Група: $fallback"
    GROUP="$fallback"
    sed 's/\r/\n/g' "$CSV_FILE" | iconv -f cp1251 -t utf-8
    exit 0
fi

print_if_needed "Розклад для: $GROUP"

out_file="Google_$(basename "$CSV_FILE")"
temp_a=$(mktemp)
temp_b=$(mktemp)

sed 's/\r/\n/g' "$CSV_FILE" | iconv -f cp1251 -t utf-8 | awk -v GRP="$GROUP" '
BEGIN { FS=","; OFS="\t" }
NR == 1 { next }

function clean(txt) { gsub(/^"|"$/, "", txt); return txt }
function get_key(d, t) {
    split(d, d_arr, "."); split(t, t_arr, ":")
    return sprintf("%04d%02d%02d%02d%02d", d_arr[3], d_arr[2], d_arr[1], t_arr[1], t_arr[2])
}

{
    original = $0
    match(original, /"[0-3][0-9]\.[0-1][0-9]\.[0-9]{4}"/)
    if (RSTART == 0) next

    pre = substr(original, 1, RSTART - 2)
    rest = substr(original, RSTART)
    n = 0; quoted = 0; token = ""

    for (i = 1; i <= length(rest); ++i) {
        ch = substr(rest, i, 1)
        if (ch == "\"") quoted = !quoted
        else if (ch == "," && !quoted) {
            fields[++n] = token; token = ""
        } else token = token ch
    }
    fields[++n] = token
    for (j = 1; j <= n; ++j) fields[j] = clean(fields[j])
    if (n < 12) next

    match(pre, /(ПЗПІ-[0-9]+-[0-9]+)/, grp_match)
    if (grp_match[1] != GRP) next
    gsub(/^[[:space:]]+/, "", pre)
    subj = pre
    desc = fields[11]
    type = "Інше"
    if (desc ~ /Лб/) type = "Лб"
    else if (desc ~ /Лк/) type = "Лк"
    else if (desc ~ /Пз/) type = "Пз"
    else if (desc ~ /Екз|Exam|екзамен/i) type = "Екз"

    print subj, type, fields[1], fields[2], fields[3], fields[4], desc, get_key(fields[1], fields[2])
}
' > "$temp_a"

sort -t $'\t' -k8,8 "$temp_a" > "$temp_b"

awk -F'\t' '
BEGIN {
    OFS = ","
    print "Subject", "Start Date", "Start Time", "End Date", "End Time", "Description"
}
function format_date(dt) {
    split(dt, d, ".")
    return sprintf("%02d/%02d/%04d", d[2], d[1], d[3])
}
function format_time(tm) {
    split(tm, t, ":")
    h = t[1] + 0
    m = t[2]
    suffix = (h >= 12) ? "PM" : "AM"
    if (h == 0) h = 12
    else if (h > 12) h -= 12
    return sprintf("%02d:%s %s", h, m, suffix)
}
{
    pair = $1 "_" $2
    unique_key = $3 "_" $7
    if ($2 == "Лб") {
        if (!(unique_key in lab_count)) {
            count[pair]++
            lab_count[unique_key] = count[pair]
        }
        num = lab_count[unique_key]
    } else {
        count[pair]++
        num = count[pair]
    }
    full_title = $1 "; №" num
    print "\"" full_title "\"", "\"" format_date($3) "\"", "\"" format_time($4) "\"", "\"" format_date($5) "\"", "\"" format_time($6) "\"", "\"" $7 "\""
}
' "$temp_b" > "$out_file"

$QUIET_MODE || cat "$out_file"

rm -f "$temp_a" "$temp_b" "$temp_group_file"

